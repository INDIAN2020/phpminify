<?php final class WebDriverSession extends WebDriverContainer { protected function methods() { return array( 'url' => 'GET', // for POST, use open($url) 'forward' => 'POST', 'back' => 'POST', 'refresh' => 'POST', 'execute' => 'POST', 'execute_async' => 'POST', 'screenshot' => 'GET', 'window_handle' => 'GET', 'window_handles' => 'GET', 'frame' => 'POST', 'source' => 'GET', 'title' => 'GET', 'keys' => 'POST', 'orientation' => array('GET', 'POST'), 'alert_text' => array('GET', 'POST'), 'accept_alert' => 'POST', 'dismiss_alert' => 'POST', 'moveto' => 'POST', 'click' => 'POST', 'buttondown' => 'POST', 'buttonup' => 'POST', 'doubleclick' => 'POST', ); } public function open($url) { $this->curl('POST', '/url', array('url' => $url)); return $this; } public function capabilities() { $result = $this->curl('GET', ''); return $result['value']; } public function close() { $result = $this->curl('DELETE', ''); return $result['value']; } public function getAllCookies() { $result = $this->curl('GET', '/cookie'); return $result['value']; } public function setCookie($cookie_json) { $this->curl('POST', '/cookie', array('cookie' => $cookie_json)); return $this; } public function deleteAllCookies() { $this->curl('DELETE', '/cookie'); return $this; } public function deleteCookie($cookie_name) { $this->curl('DELETE', '/cookie/' . $cookie_name); return $this; } public function timeouts() { $item = new WebDriverSimpleItem($this->url . '/timeouts'); return $item->setMethods(array( 'async_script' => 'POST', 'implicit_wait' => 'POST', )); } public function ime() { $item = new WebDriverSimpleItem($this->url . '/ime'); return $item->setMethods(array( 'available_engines' => 'GET', 'active_engine' => 'GET', 'activated' => 'GET', 'deactivate' => 'POST', 'activate' => 'POST', )); } public function deleteWindow() { $this->curl('DELETE', '/window'); return $this; } public function focusWindow($name) { $this->curl('POST', '/window', array('name' => $name)); return $this; } public function window($window_handle = 'current') { $item = new WebDriverSimpleItem($this->url . '/window/' . $window_handle); return $item->setMethods(array( 'size' => array('GET', 'POST'), 'position' => array('GET', 'POST'), )); } public function touch() { $item = new WebDriverSimpleItem($this->url . '/touch'); return $item->setMethods(array( 'click' => 'POST', 'down' => 'POST', 'up' => 'POST', 'move' => 'POST', 'scroll' => 'POST', 'doubleclick' => 'POST', 'longclick' => 'POST', 'flick' => 'POST', )); } protected function getElementPath($element_id) { return sprintf('%s/element/%s', $this->url, $element_id); } } 